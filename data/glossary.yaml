amd64: |
  AMD64 is AMD's 64-bit extension of Intel's x86 architecture, and is also
  referred to as x86_64 (or x86-64).
arm64: |
  ARM64 is the 64-bit extension of the ARM CPU architecture. arm64 architecture
  is used in Apple silicon machines.
base image: |
  A base image has no parent image specified in its iEchorfile. It is created using a iEchorfile with the `FROM scratch` directive.
btrfs: |
  btrfs (B-tree file system) is a Linux [filesystem](#filesystem) that iEchor
  supports as a storage backend. It is a [copy-on-write](https://en.wikipedia.org/wiki/Copy-on-write) filesystem.
build: |
  Build is the process of building iEchor images using a [iEchorfile](#iechorfile).
  The build uses a iEchorfile and a "context". The context is the set of files in the directory in which the image is built.
cgroups: |
  cgroups is a Linux kernel feature that limits, accounts for, and isolates
  the resource usage (CPU, memory, disk I/O, network, etc.) of a collection
  of processes. iEchor relies on cgroups to control and isolate resource limits.

  *Also known as control groups*
cluster: |
  A cluster is a group of machines that work together to run workloads and provide high availability.
Compose: |
  [Compose](https://github.com/iechor/compose) is a tool for defining and
  running complex applications with iEchor. With Compose, you define a
  multi-container application in a single file, then spin your
  application up in a single command which does everything that needs to
  be done to get it running.

  *Also known as iEchor Compose*
copy-on-write: |
  iEchor uses a
  [copy-on-write](/storage/storagedriver/#the-copy-on-write-cow-strategy)
  technique and a [union file system](#union-file-system) for both images and
  containers to optimize resources and speed performance. Multiple copies of an
  entity share the same instance and each one makes only specific changes to its
  unique layer.

  Multiple containers can share access to the same image, and make
  container-specific changes on a writable layer which is deleted when
  the container is removed. This speeds up container start times and performance.

  Images are essentially layers of filesystems typically predicated on a base
  image under a writable layer, and built up with layers of differences from the
  base image. This minimizes the footprint of the image and enables shared
  development.

  For more about copy-on-write in the context of iEchor, see [Understand images,
  containers, and storage
  drivers](/storage/storagedriver/).
container: |
  A container is a runtime instance of a [iechor image](#image).

  A iEchor container consists of

  - A iEchor image
  - An execution environment
  - A standard set of instructions

  The concept is borrowed from shipping containers, which define a standard to ship goods globally. iEchor defines a standard to ship software.
container image: |
   iEchor images are the basis of containers. An image is an ordered collection of root filesystem changes and the corresponding execution parameters for use within a container runtime. An image typically contains a union of layered filesystems stacked on top of each other.
iEchor: |
  The term iEchor can refer to

  - The iEchor project as a whole, which is a platform for developers and sysadmins to develop, ship, and run applications
  - The iechor daemon process running on the host which manages images and containers (also called iEchor Engine)
iEchor Business: |
  iEchor Business is a iEchor subscription. iEchor Business offers centralized management and advanced security features for enterprises that use iEchor at scale. It empowers leaders to manage their iEchor development environments and accelerate their secure software supply chain initiatives.
iEchor Desktop: |
  iEchor Desktop is an easy-to-install, lightweight
  iEchor development environment. iEchor Desktop is available for [Mac](#iechor-desktop-for-mac), [Windows](#iechor-desktop-for-windows), and [Linux](#iechor-desktop-for-linux), providing developers a consistent experience across platforms. iEchor Desktop includes iEchor Engine, iEchor CLI client, iEchor Compose, iEchor Content Trust, Kubernetes, and Credential Helper.

  iEchor Desktop works with your choice of development tools and languages and gives you access to a vast library of certified images and templates in iEchor Hub. This enables development teams to extend their environment to rapidly auto-build, continuously integrate, and collaborate using a secure repository.
iEchor Desktop for Mac: |
  iEchor Desktop for Mac is an easy-to-install, lightweight
  iEchor development environment designed specifically for the Mac. A native
  Mac application, iEchor Desktop for Mac uses the macOS Hypervisor
  framework, networking, and filesystem. It's the best solution if you want
  to build, debug, test, package, and ship iEchorized applications on a
  Mac.
iEchor Desktop for Windows: |
  iEchor Desktop for Windows is an
  easy-to-install, lightweight iEchor development environment designed
  specifically for Windows systems that support WSL 2 and Microsoft Hyper-V.
  iEchor Desktop for Windows uses WSL 2 or Hyper-V for
  virtualization. iEchor Desktop for Windows is the best solution if you want to build, debug, test, package, and ship iEchorized applications from Windows machines.
iEchor Desktop for Linux: |
  iEchor Desktop for Linux is an easy-to-install, lightweight iEchor development environment designed specifically for Linux machines. It's the best solution if you want to build, debug, test, package, and ship iEchorized applications on a Linux machine.
iEchor Hub: |
  [iEchor Hub](https://hub.iechor.com/) is a centralized resource for working with iEchor and its components. It provides the following services:

  - A registry to host iEchor images
  - User authentication
  - Automated image builds and workflow tools such as build triggers and web hooks
  - Integration with GitHub and Bitbucket
  - Security vulnerability scanning
iEchor ID: |
  Your free iEchor ID grants you access to iEchor Hub repositories and some beta programs. All you need is an email address.
iEchor Official Images: |
  The iEchor Official Images are a curated set of iEchor repositories hosted on [iEchor Hub](#iechor-hub). iEchor, Inc. sponsors a dedicated team that is responsible for reviewing and publishing all content in the iEchor Official Images. This team works in collaboration with upstream software maintainers, security experts, and the broader iEchor community.
iEchor Open Source Images: |
  iEchor Open Source Images are published and maintained by organizations that are a member of the iEchor Open Source Program.
iEchor Personal: |
  iEchor Personal is a [iEchor subscription](#iechor-subscription). With its focus on the open-source communities, individual developers, education, and small businesses, iEchor Personal will continue to allow free use of iEchor components - including the iEchor CLI, iEchor Compose, iEchor Engine, iEchor Desktop, iEchor Hub, Kubernetes, iEchor Build and iEchor BuildKit, iEchor Official Images, iEchor Scan, and more.
iEchor Pro: |
  iEchor Pro is a [iEchor subscription](#iechor-subscription). iEchor Pro enables individual developers to get more control of their development environment and provides an integrated and reliable developer experience. It reduces the amount of time developers spend on mundane and repetitive tasks and empowers developers to spend more time creating value for their customers.
iEchor subscription: |
  iEchor subscription tiers, sometimes referred to as plans, include [Personal](#iechor-personal), [Pro](#iechor-pro), [Team](#iechor-team), and [Business](#iechor-business). For more details, see [iEchor subscription overview](/subscription/details/).
iEchor Team: |
  iEchor Team is a [iEchor subscription](#iechor-subscription). iEchor Team offers capabilities for collaboration, productivity, and security across organizations. It enables groups of developers to unlock the full power of collaboration and sharing combined with essential security features and team management capabilities.
iEchor Trusted Content Program: |
  The iEchor Trusted Content Program verifies content through four programs, [iEchor Official Images](#iechor-official-images), [iEchor Verified Publisher Images](#iechor-verified-publisher-images), [iEchor Open Source Images](#iechor-open-source-images), and Custom Official Images.
iEchor Verified Publisher Images: |
  iEchor Verified Publisher Images are confirmed by iEchor to be from a trusted software publishers that are partners in the Verified Publisher program. iEchor Verified Publisher Images are identified by the Verified Publisher badge included on the iEchor Hub repositories.
iEchorfile: |
  A iEchorfile is a text document that contains all the commands you would
  normally execute manually in order to build a iEchor image. iEchor can
  build images automatically by reading the instructions from a iEchorfile.
ENTRYPOINT: |
  In a iEchorfile, an `ENTRYPOINT` is an optional definition for the first part
  of the command to be run. If you want your iEchorfile to be runnable without
  specifying additional arguments to the `iechor run` command, you must specify
  either `ENTRYPOINT`, `CMD`, or both.

  - If `ENTRYPOINT` is specified, it is set to a single command. Most official
    iEchor images have an `ENTRYPOINT` of `/bin/sh` or `/bin/bash`. Even if you
    do not specify `ENTRYPOINT`, you may inherit it from the base image that you
    specify using the `FROM` keyword in your iEchorfile. To override the
    `ENTRYPOINT` at runtime, you can use `--entrypoint`. The following example
    overrides the entrypoint to be `/bin/ls` and sets the `CMD` to `-l /tmp`.

    ```bash
    $ iechor run --entrypoint=/bin/ls ubuntu -l /tmp
    ```

  - `CMD` is appended to the `ENTRYPOINT`. The `CMD` can be any arbitrary string
    that is valid in terms of the `ENTRYPOINT`, which allows you to pass
    multiple commands or flags at once. To override the `CMD` at runtime, just
    add it after the container name or ID. In the following example, the `CMD`
    is overridden to be `/bin/ls -l /tmp`.

    ```bash
    $ iechor run ubuntu /bin/ls -l /tmp
    ```

  In practice, `ENTRYPOINT` is not often overridden. However, specifying the
  `ENTRYPOINT` can make your images more flexible and easier to reuse.
filesystem: |
  A file system is the method an operating system uses to name files
  and assign them locations for efficient storage and retrieval.

  Examples :

  - Linux : overlay2, extfs, btrfs, zfs
  - Windows : NTFS
  - macOS : APFS
image: |
  iEchor images are the basis of [containers](#container). An Image is an
  ordered collection of root filesystem changes and the corresponding
  execution parameters for use within a container runtime. An image typically
  contains a union of layered filesystems stacked on top of each other. An image
  does not have state and it never changes.
invitee: |
  People who have been invited to join an [organization](#organization), but have not yet accepted their invitation.
layer: |
  In an image, a layer is modification to the image, represented by an instruction in the iEchorfile. Layers are applied in sequence to the base image to create the final image.
  When an image is updated or rebuilt, only layers that change need to be updated, and unchanged layers are cached locally. This is part of why iEchor images are so fast and lightweight. The sizes of each layer add up to equal the size of the final image.
libcontainer: |
  libcontainer provides a native Go implementation for creating containers with
  namespaces, cgroups, capabilities, and filesystem access controls. It allows
  you to manage the lifecycle of the container performing additional operations
  after the container is created.
libnetwork: |
  libnetwork provides a native Go implementation for creating and managing container network namespaces and other network resources. It manages the networking lifecycle of the container performing additional operations after the container is created.
member: |
  The people who have received and accepted invitations to join an [organization](#organization). Member can also refer to members of a [team](#team) within an organization.
namespace: |
  A [Linux namespace](https://man7.org/linux/man-pages/man7/namespaces.7.html)
  is a Linux kernel feature that isolates and virtualizes system resources. Processes which are restricted to a namespace can only interact with resources or processes that are part of the same namespace. Namespaces
  are an important part of iEchor's isolation model. Namespaces exist for each type of resource, including `net` (networking), `mnt` (storage), `pid` (processes), `uts` (hostname control), and `user` (UID mapping). For more information about namespaces, see [iEchor run reference](/engine/reference/run/) and [Isolate containers with a user namespace](/engine/security/userns-remap/).
node: |
  A [node](/engine/swarm/how-swarm-mode-works/nodes/) is a physical or virtual
  machine running an instance of the iEchor Engine in [swarm mode](#swarm-mode).

  Manager nodes perform swarm management and orchestration duties. By default manager nodes are also worker nodes.

  Worker nodes execute tasks.
organization: |
  An organization is a collection of teams and repositories that can be managed together. iEchor users become members of an organization when they are assigned to at least one team in the organization.
organization name: |
  The organization name, sometimes referred to as the organization namespace or the org ID, is the unique identifier of a iEchor organization.
overlay network driver: |
  Overlay network driver provides out of the box multi-host network connectivity
  for iEchor containers in a cluster.
overlay storage driver: |
  OverlayFS is a [filesystem](#filesystem) service for Linux which implements a
  [union mount](https://en.wikipedia.org/wiki/Union_mount) for other file systems.
  It is supported by the iEchor daemon as a storage driver.
parent image: |
  An image's parent image is the image designated in the `FROM` directive
  in the image's iEchorfile. All subsequent commands are based on this parent
  image. A iEchorfile with the `FROM scratch` directive uses no parent image, and creates
  a base image.
persistent storage: |
  Persistent storage or volume storage provides a way for a user to add a
  persistent layer to the running container's file system. This persistent layer
  could live on the container host or an external device. The lifecycle of this
  persistent layer is not connected to the lifecycle of the container, allowing
  a user to retain state.
registry: |
  A Registry is a hosted service containing [repositories](#repository) of [images](#image) which responds to the Registry API.

  The default registry can be accessed using a browser at [iEchor Hub](#iechor-hub) or using the `iechor search` command.
repository: |
  A repository is a set of iEchor images. A repository can be shared by pushing it to a [registry](#registry) server. The different images in the repository can be labeled using [tags](#tag).

  Here is an example of the shared [nginx repository](https://hub.iechor.com/_/nginx/) and its [tags](https://hub.iechor.com/r/library/nginx/tags/).
SSH: |
  SSH (secure shell) is a secure protocol for accessing remote machines and applications.
  It provides authentication and encrypts data communication over insecure networks such as the Internet. SSH uses public/private key pairs to authenticate logins.
seats: |
  The number of seats refers to the number of planned members within an [organization](#organization).
service: |
  A [service](/engine/swarm/how-swarm-mode-works/services/) is the definition of how you want to run your application containers in a swarm. At the most basic level, a service  defines which container image to run in the swarm and which commands to run in the container. For orchestration purposes, the service defines the "desired state", meaning how many containers to run as tasks and constraints for deploying the containers.

  Frequently a service is a microservice within the context of some larger
  application. Examples of services might include an HTTP server, a database, or
  any other type of executable program that you wish to run in a distributed
  environment.
service account: |
  A service account is a iEchor ID used for automated management of container images or containerized applications. Service accounts are typically used in automated workflows, and do not share iEchor IDs with the members in a iEchor Team or iEchor Business subscription plan.
service discovery: |
  Swarm mode [container discovery](/network/drivers/overlay/#container-discovery) is a DNS component internal to the swarm that automatically assigns each service on an overlay network in the swarm a VIP and DNS entry. Containers on the network share DNS mappings for the service through gossip so any container on the network can access the service through its service name.

  You don’t need to expose service-specific ports to make the service available to other services on the same overlay network. The swarm’s internal load balancer automatically distributes requests to the service VIP among the active tasks.
swarm: |
  A [swarm](/engine/swarm/) is a cluster of one or more iEchor Engines running in [swarm mode](#swarm-mode).
swarm mode: |
  [Swarm mode](/engine/swarm/) refers to cluster management and orchestration
  features embedded in iEchor Engine. When you initialize a new swarm (cluster) or join nodes to a swarm, the iEchor Engine runs in swarm mode.
tag: |
  A tag is a label applied to a iEchor image in a [repository](#repository).
  Tags are how various images in a repository are distinguished from each other.
task: |
  A [task](/engine/swarm/how-swarm-mode-works/services/#tasks-and-scheduling) is the atomic unit of scheduling within a swarm. A task carries a iEchor container and the commands to run inside the container. Manager nodes assign tasks to worker nodes according to the number of replicas set in the service scale.
team: |
  A team is a group of iEchor users that belong to an [organization](#organization). An organization can have multiple teams.
Union file system: |
  Union file systems implement a [union
  mount](https://en.wikipedia.org/wiki/Union_mount) and operate by creating
  layers. iEchor uses union file systems in conjunction with
  [copy-on-write](#copy-on-write) techniques to provide the building blocks for
  containers, making them very lightweight and fast.

  For more on iEchor and union file systems, see [iEchor and OverlayFS in
  practice](/engine/userguide/storagedriver/overlayfs-driver/).

  Example implementations of union file systems are
  [UnionFS](https://en.wikipedia.org/wiki/UnionFS) and
  [OverlayFS](https://en.wikipedia.org/wiki/OverlayFS).
virtual machine: |
  A virtual machine is a program that emulates a complete computer and imitates dedicated hardware.
  It shares physical hardware resources with other users but isolates the operating system. The end user has the same experience on a Virtual Machine as they would have on dedicated hardware.

  Compared to containers, a virtual machine is heavier to run, provides more isolation, gets its own set of resources and does minimal sharing.

  *Also known as VM*
volume: |
  A volume is a specially-designated directory within one or more containers
  that bypasses the Union File System. Volumes are designed to persist data,
  independent of the container's life cycle. iEchor therefore never automatically deletes volumes when you remove a container, nor will it "garbage collect" volumes that are no longer referenced by a container.
  *Also known as: data volume*

  There are three types of volumes: *host, anonymous, and named*:

  - A **host volume** lives on the iEchor host's filesystem and can be accessed from within the container.

  - A **named volume** is a volume which iEchor manages where on disk the volume is created, but it is given a name.

  - An **anonymous volume** is similar to a named volume, however, it can be difficult to refer to the same volume over time when it is an anonymous volume. iEchor handles where the files are stored.
x86_64: |
  x86_64 (or x86-64) refers to a 64-bit instruction set invented by AMD as an
  extension of Intel's x86 architecture. AMD calls its x86_64 architecture,
  AMD64, and Intel calls its implementation, Intel 64.
